name: Release Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"

      - name: Call Docker Build Workflow
        id: docker-build
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-build.yml',
              ref: context.ref,
              inputs: {
                image_tag: '${{ steps.version.outputs.tag }}',
                is_release: 'true'
              }
            });
            console.log('Docker build workflow triggered for release');
            return data;

      - name: Wait for Docker build to complete
        uses: actions/github-script@v7
        with:
          script: |
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();

            console.log('Waiting for Docker build workflow to complete...');

            while (Date.now() - startTime < maxWaitTime) {
              // Get the most recent workflow runs for docker-build.yml
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docker-build.yml',
                per_page: 5
              });

              // Find the run that was triggered by our dispatch
              const ourRun = runs.find(run =>
                run.event === 'workflow_dispatch' &&
                run.status !== 'completed' &&
                run.created_at > new Date(Date.now() - 5 * 60 * 1000).toISOString() // Within last 5 minutes
              );

              if (!ourRun) {
                console.log('No matching workflow run found, assuming completed');
                break;
              }

              console.log(`Workflow run ${ourRun.id} status: ${ourRun.status}, conclusion: ${ourRun.conclusion || 'pending'}`);

              if (ourRun.status === 'completed') {
                if (ourRun.conclusion === 'success') {
                  console.log('Docker build completed successfully');
                  break;
                } else {
                  throw new Error(`Docker build failed with conclusion: ${ourRun.conclusion}`);
                }
              }

              console.log(`Waiting ${checkInterval / 1000} seconds before next check...`);
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            if (Date.now() - startTime >= maxWaitTime) {
              throw new Error('Timeout waiting for Docker build to complete');
            }

      - name: Create GitHub Release
        if: github.event_name == 'push'
        run: |
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "Release ${{ steps.version.outputs.tag }}" \
            --notes "## Docker Image

          The Docker image has been built and pushed to GitHub Container Registry:

          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}
          \`\`\`

          ### Available Tags
          - \`${{ steps.version.outputs.tag }}\` - Specific version
          - \`${{ steps.version.outputs.version }}\` - Version without 'v' prefix
          - \`latest\` - Latest release (if this is the default branch)

          ### Multi-Architecture Support
          This image supports both \`linux/amd64\` and \`linux/arm64\` architectures." \
            ${{ contains(steps.version.outputs.tag, 'alpha') || contains(steps.version.outputs.tag, 'beta') || contains(steps.version.outputs.tag, 'rc') && '--prerelease' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release details
        run: |
          echo "Release details:"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Tag: ${{ steps.version.outputs.tag }}"
          echo "Docker image: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.tag }}"
